.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.25)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Set::Associate::NewKey 3"
.TH Set::Associate::NewKey 3 "2013-02-26" "perl v5.17.9" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Set::Associate::NewKey \- New Key assignment methods
.SH "VERSION"
.IX Header "VERSION"
version 0.001001
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class implements the mechanism which controls how the values are assigned to 'new' keys.
.PP
The part you're mostly interested in are the \*(L"\s-1CLASS METHODS\*(R"\s0, which return the right populator.
.PP
This is more or less a wrapper for passing around subs with an implict interface.
.PP
.Vb 7
\&    my $assigner = Set::Associate::NewKey\->new(
\&        name => \*(Aqlinear_wrap\*(Aq,
\&        code => sub {
\&            my ( $self, $sa , $key ) = @_;
\&            ....
\&        },
\&    );
\&
\&    my $value = $assigner\->run( $set_associate_object, $key );
.Ve
.SH "CONSTRUCTOR ARGUMENTS"
.IX Header "CONSTRUCTOR ARGUMENTS"
.SS "name"
.IX Subsection "name"
.Vb 1
\&    required Str
.Ve
.SS "code"
.IX Subsection "code"
.Vb 1
\&    required CodeRef
.Ve
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "linear_wrap"
.IX Subsection "linear_wrap"
\&\f(CW\*(C`shift\*(C'\fR's the first item off the internal \f(CW\*(C`_items_cache\*(C'\fR
.PP
.Vb 4
\&    my $sa = Set::Associate\->new(
\&        ...
\&        on_new_key => Set::Associate::NewKey::linear_wrap
\&    );
.Ve
.PP
or alternatively
.PP
.Vb 2
\&    my $code = Set::Associate::NewKey::linear_wrap
\&    my $newval = $code\->run( $set, $key_which_will_be_ignored );
.Ve
.PP
You can use \f(CW\*(C`\->\*(C'\fR or not if you want, nothing under the hood cares.
.SS "random_pick"
.IX Subsection "random_pick"
non-destructively picks an element from \f(CW\*(C`_items_cache\*(C'\fR at random.
.PP
.Vb 4
\&    my $sa = Set::Associate\->new(
\&        ...
\&        on_new_key => Set::Associate::NewKey::random_pick
\&    );
.Ve
.PP
or alternatively
.PP
.Vb 2
\&    my $code = Set::Associate::NewKey::random_pick
\&    my $newval = $code\->run( $set, $key_which_will_be_ignored );
.Ve
.PP
You can use \f(CW\*(C`\->\*(C'\fR or not if you want, nothing under the hood cares.
.SS "pick_offset"
.IX Subsection "pick_offset"
Assuming offset is numeric, pick either that number, or a modulo of that number.
.PP
\&\fB\s-1NOTE:\s0\fR do not use this unless you are only working with numeric keys.
.PP
If you're using anything else, the hash_sha1 or hash_md5 methods are suggested.
.PP
.Vb 4
\&    my $sa = Set::Associate\->new(
\&        ...
\&        on_new_key => Set::Associate::NewKey::pick_offset
\&    );
.Ve
.PP
or alternatively
.PP
.Vb 3
\&    my $code = Set::Associate::NewKey::pick_offset
\&    my $newval = $code\->run( $set, 9001 ); # despite picking numbers OVER NINE THOUSAND
\&                                           # will still return items in the array
.Ve
.PP
You can use \f(CW\*(C`\->\*(C'\fR or not if you want, nothing under the hood cares.
.SS "hash_sha1"
.IX Subsection "hash_sha1"
\&\fBrequires bigint support\fR
.PP
Determines the offset for \*(L"pick_offset\*(R" from taking the numeric value of the \s-1SHA1\s0 hash of the given string
.PP
.Vb 4
\&    my $sa = Set::Associate\->new(
\&        ...
\&        on_new_key => Set::Associate::NewKey::hash_sha1
\&    );
.Ve
.PP
or alternatively
.PP
.Vb 2
\&    my $code = Set::Associate::NewKey::hash_sha1();
\&    my $newval = $code\->run( $set, "Some String" );
.Ve
.PP
You can use \f(CW\*(C`\->\*(C'\fR or not if you want, nothing under the hood cares.
.SS "hash_md5"
.IX Subsection "hash_md5"
\&\fBrequires bigint support\fR
.PP
Determines the offset for \*(L"pick_offset\*(R" from taking the numeric value of the \s-1MD5\s0 hash of the given string
.PP
.Vb 4
\&    my $sa = Set::Associate\->new(
\&        ...
\&        on_new_key => Set::Associate::NewKey::hash_md5
\&    );
.Ve
.PP
or alternatively
.PP
.Vb 2
\&    my $code = Set::Associate::NewKey::hash_md5();
\&    my $newval = $code\->run( $set, "Some String" );
.Ve
.PP
You can use \f(CW\*(C`\->\*(C'\fR or not if you want, nothing under the hood cares.
.SH "METHODS"
.IX Header "METHODS"
.SS "run"
.IX Subsection "run"
runs code attached via \*(L"code\*(R"
.PP
.Vb 1
\&    my $value = $object\->run( $set_associate_object , $key );
.Ve
.PP
And \f(CW$value\fR is the newly formed associaiton value.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "name"
.IX Subsection "name"
.SS "code"
.IX Subsection "code"
.SH "AUTHOR"
.IX Header "AUTHOR"
Kent Fredric <kentfredric@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Kent Fredric <kentfredric@gmail.com>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
