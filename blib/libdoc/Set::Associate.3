.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.25)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Set::Associate 3"
.TH Set::Associate 3 "2013-02-26" "perl v5.17.9" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Set::Associate \- Pick items from a dataset associatively
.SH "VERSION"
.IX Header "VERSION"
version 0.001000
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Essentially, this is a simple toolkit to map an infinite-many items to a corresponding finite-many values,
ie: A nick coloring algorithm.
.PP
The most simple usage of this code gives out values from \f(CW\*(C`items\*(C'\fR seqeuntially, and remembers seen values
and persists them within the scope of the program, ie:
.PP
.Vb 9
\&    my $set = Set::Associate\->new(
\&        items => [qw( red blue yellow )],
\&    );
\&    sub color_nick {
\&        my $nick = shift;
\&        return colorize( $nick, $set\->get_associated( $nick );
\&    }
\&    ...
\&    printf \*(Aq<< %s >> %s\*(Aq, color_nick( $nick ), $message;
.Ve
.PP
And this is extensible to use some sort of persisting allocation method such as a hash
.PP
.Vb 10
\&    my $set = Set::Associate\->new(
\&        items => [qw( red blue yellow )],
\&        on_new_key => Set::Associate::NewKey::hash_sha1,
\&    );
\&    sub color_nick {
\&        my $nick = shift;
\&        return colorize( $nick, $set\->get_associated( $nick );
\&    }
\&    ...
\&    printf \*(Aq<< %s >> %s\*(Aq, color_nick( $nick ), $message;
.Ve
.PP
Alternatively, you could use 1 of 2 random forms:
.PP
.Vb 1
\&    # Can produce colour runs if you\*(Aqre unlucky
\&
\&    my $set = Set::Associate\->new(
\&        items => [qw( red blue yellow )],
\&        on_new_key => Set::Associate::NewKey::random_pick,
\&    );
\&
\&    # Will exhaust the colour variation before giving out the same colour twice
\&    my $set = Set::Associate\->new(
\&        items => [qw( red blue yellow )],
\&        on_items_empty => Set::Associate::RefillItems::shuffle,
\&    );
.Ve
.SH "IMPLEMENTATION DETAILS"
.IX Header "IMPLEMENTATION DETAILS"
There are 2 Main phases that occur within this code
.IP "\(bu" 4
pool population
.IP "\(bu" 4
pool selection
.SS "Pool Population"
.IX Subsection "Pool Population"
The pool of available options ( \f(CW\*(C`_items_cache\*(C'\fR ) is initialised as an empty list, and every time the pool is being detected as empty ( \f(CW\*(C`_items_cache_empty\*(C'\fR ), the \f(CW\*(C`on_items_empty\*(C'\fR method is called ( \f(CW\*(C`run_on_items_empty\*(C'\fR ) and the results are pushed into the pool.
.PP
The default implementation copies items from \f(CW\*(C`items\*(C'\fR into the pool.
.SS "Pool Selection"
.IX Subsection "Pool Selection"
Pool selection can either be cherry-pick based, where the pool doesn't shrink, or can be destructive, so that the pool population phase is triggered to replenish the supply of items only when all values have been exhausted.
.PP
The default implementation \f(CW\*(C`shift\*(C'\fR's the first item off the queue, allowing the queue to be exhausted and requiring pool population to occur periodically to regenerate the source list.
.SH "CONSTRUCTOR ARGUMENTS"
.IX Header "CONSTRUCTOR ARGUMENTS"
.SS "items"
.IX Subsection "items"
.Vb 1
\&    required ArrayRef[ Any ]
.Ve
.SS "on_items_empty"
.IX Subsection "on_items_empty"
.Vb 1
\&    lazy Set::Associate::RefillItems = Set::Associate::RefillItems::linear
.Ve
.SS "on_new_key"
.IX Subsection "on_new_key"
.Vb 1
\&    lazy Set::Associate::NewKey = Set::Associate::NewKey::linear_wrap
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "items_elements"
.IX Subsection "items_elements"
.SS "run_on_items_empty"
.IX Subsection "run_on_items_empty"
.Vb 3
\&    if( not @items ){
\&        push @items, $sa\->run_on_items_empty();
\&    }
.Ve
.SS "run_on_new_key"
.IX Subsection "run_on_new_key"
.Vb 3
\&    if ( not exists $cache{$key} ){
\&        $cache{$key} = $sa\->run_on_new_key( $key );
\&    }
.Ve
.SS "associate"
.IX Subsection "associate"
.Vb 5
\&    if( $object\->associate( $key ) ) {
\&        say "already cached";
\&    } else {
\&        say "new value"
\&    }
.Ve
.SS "get_associated"
.IX Subsection "get_associated"
Generates an association automatically.
.PP
.Vb 1
\&    my $result = $object\->get_associated( $key );
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "items"
.IX Subsection "items"
.SS "on_items_empty"
.IX Subsection "on_items_empty"
.Vb 3
\&    my $object = $sa\->on_items_empty();
\&    say "Running empty items mechanism " . $object\->name;
\&    push @items, $object\->run( $sa  );
.Ve
.SS "on_new_key"
.IX Subsection "on_new_key"
.Vb 3
\&    my $object = $sa\->on_new_key();
\&    say "Running new key mechanism " . $object\->name;
\&    my $value = $object\->run( $sa, $key );
.Ve
.SH "PRIVATE CONSTRUCTOR ARGUMENTS"
.IX Header "PRIVATE CONSTRUCTOR ARGUMENTS"
.SS "_items_cache"
.IX Subsection "_items_cache"
.Vb 1
\&    lazy ArrayRef[ Any ] = [ ]
.Ve
.SS "_association_cache"
.IX Subsection "_association_cache"
.Vb 1
\&    lazy HashRef[ Any ] = { }
.Ve
.SH "PRIVATE METHODS"
.IX Header "PRIVATE METHODS"
.SS "_items_cache_empty"
.IX Subsection "_items_cache_empty"
.SS "_items_cache_shift"
.IX Subsection "_items_cache_shift"
.SS "_items_cache_push"
.IX Subsection "_items_cache_push"
.SS "_items_cache_count"
.IX Subsection "_items_cache_count"
.SS "_items_cache_get"
.IX Subsection "_items_cache_get"
.SS "_association_cache_has"
.IX Subsection "_association_cache_has"
.Vb 3
\&    if ( $sa\->_assocition_cache_has( $key ) ){
\&        return $sa\->_association_cache_get( $key );
\&    }
.Ve
.SS "_association_cache_get"
.IX Subsection "_association_cache_get"
.Vb 1
\&    my $assocval = $sa\->_association_cache_get( $key );
.Ve
.SS "_association_cache_set"
.IX Subsection "_association_cache_set"
.Vb 1
\&    $sa\->_association_cache_set( $key, $assocval );
.Ve
.SH "PRIVATE ATTRIBUTES"
.IX Header "PRIVATE ATTRIBUTES"
.SS "_items_cache"
.IX Subsection "_items_cache"
.SS "_association_cache"
.IX Subsection "_association_cache"
.Vb 2
\&    my $cache = $sa\->_association_cache();
\&    $cache\->{ $key } = $value;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Kent Fredric <kentfredric@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Kent Fredric <kentfredric@gmail.com>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
